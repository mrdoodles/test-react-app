name: Main Push

on:
  push:
    branches: [main]

jobs:
  main-push-info:
    timeout-minutes: 1
    runs-on: ubuntu-latest
    steps:
      - run: echo "WORKFLOW             ${{ github.workflow }}"
      - run: echo "GITHUB_EVENT_NAME    ${{ github.event_name }}"
      - run: echo "GITHUB_EVENT_PATH    ${{ github.event_path }}"
      - run: echo "GITHUB_HEAD_REF      ${{ github.head_ref }}"
      - run: echo "GITHUB_JOB           ${{ github.job }}"
      - run: echo "GITHUB_REF           ${{ github.ref }}"
      - run: echo "GITHUB_REF_NAME      ${{ github.ref_name }}"
      - run: echo "GITHUB_REF_PROTECTED ${{ github.ref_protected }}"
      - run: echo "GITHUB_REF_TYPE      ${{ github.ref_type }}"

      # - uses: actions/checkout@v2
      # - name: payload

      #   run: echo "${{ github.event.client_payload.env }}"
      # - name: List files
      #   run: |
      #     pwd
      #     ls -a
      #     echo $GITHUB_SHA
      #     echo $GITHUB_REPOSITORY
      #     echo $GITHUB_WORKSPACE
      #     echo "${{ github.token }}"
      #     # git clone git@github:$GIT_REPOSITORY
      #     # git checkout $GITHUB_SHA

  build-and-deploy:
    timeout-minutes: 5
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Use NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"

      - run: corepack enable
      - run: yarn set version stable
      - run: yarn install --frozen-lockfile
      - run: yarn format:check
      - run: yarn test --coverage
        env:
          CI: true

      - name: Upload Test Coverage
        uses: actions/upload-artifact@v1
        with:
          path: coverage
          name: code-coverage

      - name: Update Browser DB
        run: npx browserslist@latest --update-db

      - name: Build Project
        run: yarn build

      - name: Upload Build Folder
        if: success()
        uses: actions/upload-artifact@v1
        with:
          path: build
          name: build

      - name: Zip Assets
        run: |
          zip -r build.zip ./build
          zip -r coverage.zip ./coverage

      - name: Create Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Production
        run: npx surge --project build --domain pink-dolphin.surge.sh
        env:
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}

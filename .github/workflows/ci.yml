name: CI

on:
  pull_request:
    branches: [develop, main]
  push:
    branches: [develop, main]

jobs:
  build:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    env:
      SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
      SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
    steps:
      - uses: actions/checkout@v2

      - name: Get the current branch name
        # shell: bash
        run: echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
        id: myref

      - name: Show current branch
        run: echo ${{ steps.myref.outputs.branch }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Use NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"
      - run: corepack enable
      - run: yarn set version stable
      - run: yarn install --frozen-lockfile
      - run: yarn format:check
      - run: yarn test --coverage
        env:
          CI: true

      - name: Upload Test Coverage
        uses: actions/upload-artifact@v1
        with:
          path: coverage
          name: code-coverage

      - name: Update Browser DB
        if: github.event_name == 'push'
        run: npx browserslist@latest --update-db

      - name: Build Project
        if: github.event_name == 'push'
        run: yarn build

      - name: Upload Build Folder
        if: github.event_name == 'push' && success()
        uses: actions/upload-artifact@v1
        with:
          path: build
          name: build

      - name: Zip Assets
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          zip -r build.zip ./build
          zip -r coverage.zip ./coverage

      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.myref.outputs.branch == 'develop'
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Staging
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        run: npx surge --project build --domain fantastic-dude.surge.sh

      - name: Deploy to Production
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.myref.outputs.branch == 'develop'
        run: npx surge --project build --domain pink-dolphin.surge.sh
